[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todolists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('todos',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('todos')\n    op.drop_table('todolists')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "revision = '9ebb2c573ca8'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todolists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todolists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todolists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('todos',",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.9ebb2c573ca8_",
        "description": "migrations.versions.9ebb2c573ca8_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todolists',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('todos',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.9ebb2c573ca8_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(\n    'sqlalchemy.url',\n    str(current_app.extensions['migrate'].db.get_engine().url).replace(\n        '%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = current_app.extensions['migrate'].db.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Todo(db.Model):\n    __tablename__ = 'todos'\n    id = db.Column(db.Integer, primary_key=True)\n    description = db.Column(db.String(), nullable=False)\n    completed = db.Column(db.Boolean, nullable=False, default=False)\n    list_id = db.Column(db.Integer, db.ForeignKey(\n        'todolists.id'), nullable=False)\n    def __repr__(self):\n        return f'<Todo {self.id} {self.description}>'\nclass TodoList(db.Model):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TodoList",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class TodoList(db.Model):\n    __tablename__ = 'todolists'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(), nullable=False)\n    todos = db.relationship('Todo', backref='list', lazy=True)\n# POST request listener from form element\n@app.route('/todos/create', methods=['POST'])\ndef create_todo():\n    # define error flag\n    error = False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_todo():\n    # define error flag\n    error = False\n    body = {}\n    # use try-except-finally to handle possible commit failure\n    try:\n        # gets value of key='description' from returning json\n        description = request.get_json()['description']\n        list_id = request.get_json()['list_id']\n        # create new Todo with form data",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "set_completed_todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def set_completed_todo(todo_id):\n    try:\n        completed = request.get_json()['completed']\n        todo = Todo.query.get(todo_id)\n        todo.completed = completed\n        db.session.commit()\n    except:\n        db.session.rollback()\n    finally:\n        db.session.close()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_todo(todo_id):\n    try:\n        Todo.query.filter_by(id=todo_id).delete()\n        db.session.commit()\n    except:\n        db.session.rollback()\n    finally:\n        db.session.close()\n    return jsonify({'success': True})\n@app.route('/lists/<list_id>')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_list_todos",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_list_todos(list_id):\n    # tells the view to render with index.html using latest model\n    return render_template('index.html',\n                           lists=TodoList.query.all(),\n                           active_list=TodoList.query.get(list_id),\n                           todos=Todo.query.filter_by(list_id=list_id).order_by('id').all())\n@app.route('/')\ndef index():\n    return redirect(url_for('get_list_todos', list_id=1))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return redirect(url_for('get_list_todos', list_id=1))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:abc123@localhost:5432/todoapp'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\nclass Todo(db.Model):\n    __tablename__ = 'todos'\n    id = db.Column(db.Integer, primary_key=True)\n    description = db.Column(db.String(), nullable=False)\n    completed = db.Column(db.Boolean, nullable=False, default=False)\n    list_id = db.Column(db.Integer, db.ForeignKey(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:abc123@localhost:5432/todoapp'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\nclass Todo(db.Model):\n    __tablename__ = 'todos'\n    id = db.Column(db.Integer, primary_key=True)\n    description = db.Column(db.String(), nullable=False)\n    completed = db.Column(db.Boolean, nullable=False, default=False)\n    list_id = db.Column(db.Integer, db.ForeignKey(\n        'todolists.id'), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\nmigrate = Migrate(app, db)\nclass Todo(db.Model):\n    __tablename__ = 'todos'\n    id = db.Column(db.Integer, primary_key=True)\n    description = db.Column(db.String(), nullable=False)\n    completed = db.Column(db.Boolean, nullable=False, default=False)\n    list_id = db.Column(db.Integer, db.ForeignKey(\n        'todolists.id'), nullable=False)\n    def __repr__(self):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "migrate = Migrate(app, db)\nclass Todo(db.Model):\n    __tablename__ = 'todos'\n    id = db.Column(db.Integer, primary_key=True)\n    description = db.Column(db.String(), nullable=False)\n    completed = db.Column(db.Boolean, nullable=False, default=False)\n    list_id = db.Column(db.Integer, db.ForeignKey(\n        'todolists.id'), nullable=False)\n    def __repr__(self):\n        return f'<Todo {self.id} {self.description}>'",
        "detail": "app",
        "documentation": {}
    }
]